2019-12-16 03:25:21,641 [9140] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2019-12-16 03:25:21,642 [9140] DEBUG    root:95: [JupyterRequire] Initializing comms.
2019-12-16 03:25:21,646 [9140] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-27 21:46:55,940 [8880] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-27 21:46:55,941 [8880] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-27 21:46:55,946 [8880] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-28 22:09:29,188 [2664] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-28 22:09:29,189 [2664] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-28 22:09:29,192 [2664] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-28 22:21:46,544 [10912] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-28 22:21:46,544 [10912] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-28 22:21:46,549 [10912] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-28 22:28:36,577 [12576] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-28 22:28:36,578 [12576] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-28 22:28:36,580 [12576] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-28 22:50:09,309 [12824] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-28 22:50:09,310 [12824] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-28 22:50:09,315 [12824] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-29 22:19:42,477 [15736] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-29 22:19:42,478 [15736] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-29 22:19:42,483 [15736] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-29 22:32:48,898 [15736] INFO     root:3: [JupyterRequire] Running "Add" with arguments ()
2020-03-29 22:34:47,996 [15736] INFO     root:3: [JupyterRequire] Running "Add" with arguments ()
2020-03-29 22:34:58,147 [15736] INFO     root:3: [JupyterRequire] Running "Add" with arguments (3, 3)
2020-03-29 22:36:50,709 [13292] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-29 22:36:50,710 [13292] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-29 22:36:50,717 [13292] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-29 23:24:42,257 [13292] INFO     root:7: [JupyterRequire] Ran with args: ('Jon', 31), and kwargs: {}
2020-03-29 23:36:27,652 [13292] INFO     root:7: [JupyterRequire] Ran with args: ('Jon', 31), and kwargs: {}
2020-03-30 22:48:51,098 [6980] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-30 22:48:51,098 [6980] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-30 22:48:51,103 [6980] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-30 23:03:00,896 [1460] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-30 23:03:00,896 [1460] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-30 23:03:00,902 [1460] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-03-30 23:18:17,589 [13556] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-03-30 23:18:17,590 [13556] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-03-30 23:18:17,596 [13556] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-01 22:14:02,083 [12188] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-01 22:14:02,097 [12188] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-01 22:14:02,102 [12188] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-01 22:19:32,926 [12188] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-01 22:19:32,926 [12188] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-01 22:19:32,935 [12188] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-01 22:19:58,202 [12188] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-01 22:19:58,202 [12188] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-01 22:19:58,208 [12188] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-01 23:24:59,822 [12188] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-01 23:24:59,822 [12188] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-01 23:24:59,828 [12188] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-02 02:40:02,042 [23116] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-02 02:40:02,042 [23116] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-02 02:40:02,044 [23116] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-02 02:41:06,620 [23116] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-02 02:41:06,620 [23116] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-02 02:41:06,625 [23116] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-02 02:42:02,266 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:42:03,271 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 02:43:18,340 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:43:19,068 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 02:44:36,511 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:44:37,290 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 02:46:29,412 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:46:29,887 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 02:46:34,239 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:46:34,409 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 02:47:14,959 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:47:15,622 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:47:16,340 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:47:16,860 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:47:49,491 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:47:49,767 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:47:49,848 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:47:50,020 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:48:49,340 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:48:49,522 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:48:49,609 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:48:49,791 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:49:09,983 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:49:10,246 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:49:10,551 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:49:10,742 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:50:13,310 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:13,544 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:50:13,629 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:13,804 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:50:47,626 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:47,801 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:50:47,965 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:48,155 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:50:57,051 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:57,642 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42207
2020-04-02 02:50:58,655 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:58,826 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:50:58,915 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:50:59,093 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:51:39,111 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:51:39,353 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:51:39,435 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:51:39,618 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:52:05,275 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:52:05,449 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:52:05,530 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:52:05,697 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:52:45,580 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:52:46,517 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42207
2020-04-02 02:52:47,009 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:52:47,185 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:52:47,269 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:52:47,457 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 02:53:09,043 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:53:09,222 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.data_spec HTTP/1.1" 200 None
2020-04-02 02:53:09,307 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 02:53:09,501 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/41025.swdir HTTP/1.1" 200 None
2020-04-02 04:44:15,511 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:44:16,422 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42211
2020-04-02 04:46:31,038 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:46:31,493 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/00922.data_spec HTTP/1.1" 404 228
2020-04-02 04:46:31,506 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:46:31,931 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/00922.swdir HTTP/1.1" 404 224
2020-04-02 04:46:50,112 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:46:50,598 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 04:46:51,242 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:46:51,933 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 04:50:30,795 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:50:31,191 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 04:50:31,290 [23116] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 04:50:31,459 [23116] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 06:14:05,216 [5976] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-02 06:14:05,216 [5976] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-02 06:14:05,220 [5976] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-02 06:15:53,531 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:15:56,174 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42200
2020-04-02 06:18:08,932 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:18:11,224 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42202
2020-04-02 06:18:20,721 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:18:20,920 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42202
2020-04-02 06:18:21,014 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:18:21,952 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 06:18:22,399 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:18:27,785 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 06:22:18,710 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:22:27,914 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42197
2020-04-02 06:22:30,179 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:22:30,417 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 06:22:30,511 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 06:22:30,746 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 06:35:48,128 [5976] DEBUG    matplotlib:271: [JupyterRequire] $HOME=C:\Users\trueblood
2020-04-02 06:35:48,129 [5976] DEBUG    matplotlib:271: [JupyterRequire] CONFIGDIR=C:\Users\trueblood\.matplotlib
2020-04-02 06:35:48,130 [5976] DEBUG    matplotlib:271: [JupyterRequire] matplotlib data path: C:\Users\trueblood\AppData\Local\Continuum\anaconda3\envs\science\lib\site-packages\matplotlib\mpl-data
2020-04-02 06:35:48,147 [5976] DEBUG    matplotlib:997: [JupyterRequire] loaded rc file C:\Users\trueblood\AppData\Local\Continuum\anaconda3\envs\science\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2020-04-02 06:35:48,151 [5976] DEBUG    matplotlib:1634: [JupyterRequire] matplotlib version 3.1.0
2020-04-02 06:35:48,151 [5976] DEBUG    matplotlib:1635: [JupyterRequire] interactive is False
2020-04-02 06:35:48,152 [5976] DEBUG    matplotlib:1636: [JupyterRequire] platform is win32
2020-04-02 06:35:48,152 [5976] DEBUG    matplotlib:1637: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'encodings.cp1252', 'site', 'os', 'stat', '_stat', 'ntpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'msvcrt', '_winapi', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'posixpath', 'logging', 'collections.abc', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'pygments.util', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_win32', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'typing', 'typing.io', 'typing.re', 'IPython.core.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'selectors', 'select', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.windows_events', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.base', 'prompt_toolkit.log', 'prompt_toolkit.eventloop.coroutine', 'prompt_toolkit.eventloop.defaults', 'prompt_toolkit.utils', 'six.moves', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.cache', 'prompt_toolkit.eventloop.future', 'prompt_toolkit.eventloop.context', 'prompt_toolkit.eventloop.async_generator', 'queue', '_queue', 'six.moves.queue', 'prompt_toolkit.eventloop.event', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.filters', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.enums', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters.cli', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.document', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.layout.screen', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.vt100', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'array', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.mouse_events', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.renderer', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.patch_stdout', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.compiled.fake', 'jedi.evaluate.analysis', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.context.function', 'jedi.evaluate.docstrings', 'jedi.evaluate.pep0484', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.context.asynchronous', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'nturl2path', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_5', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'ipywidgets', 'ipywidgets._version', 'ipywidgets.widgets', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.util', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'daiquiri.formatter', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'surfpy', 'surfpy.location', 'surfpy.units', 'surfpy.swell', 'surfpy.tools', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._inet', 'asn1crypto._ffi', 'asn1crypto._perf', 'ctypes.util', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'zipfile', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'surfpy.basedata', 'surfpy.buoystations', 'surfpy.basestations', 'surfpy.buoystation', 'surfpy.basestation', 'surfpy.buoydata', 'surfpy.buoyspectra', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'surfpy.wavemodel', 'surfpy.noaamodel', 'surfpy.simplegribmessage', 'grippy', 'grippy.templates', 'grippy.helpers', 'grippy.sections', 'grippy.message', 'surfpy.weathermodel', 'surfpy.sun', 'surfpy.tidestation', 'surfpy.tideevent', 'surfpy.tidedata', 'surfpy.tidestations', 'surfpy.serialize', 'netrc', 'encodings.charmap', 'matplotlib', 'distutils', 'distutils.version', 'matplotlib.cbook', 'gzip', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._internal', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.utils', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_7', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.mtrand', 'mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'kiwisolver']
2020-04-02 06:35:48,309 [5976] DEBUG    matplotlib:271: [JupyterRequire] CACHEDIR=C:\Users\trueblood\.matplotlib
2020-04-02 06:35:48,321 [5976] DEBUG    matplotlib.font_manager:1352: [JupyterRequire] Using fontManager instance from C:\Users\trueblood\.matplotlib\fontlist-v310.json
2020-04-02 06:35:48,732 [5976] DEBUG    matplotlib.pyplot:219: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-04-02 06:35:48,738 [5976] DEBUG    matplotlib.pyplot:219: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-04-02 06:35:52,711 [5976] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-04-02 06:35:52,712 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,713 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,713 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,713 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,714 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,714 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,714 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,715 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,715 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,716 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-04-02 06:35:52,716 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-04-02 06:35:52,716 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,718 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,718 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,718 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,718 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,719 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,719 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-04-02 06:35:52,720 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,720 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,721 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,721 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-04-02 06:35:52,722 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,722 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,723 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,723 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,723 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,724 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,725 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-04-02 06:35:52,725 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,725 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,726 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,727 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-04-02 06:35:52,727 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,727 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,728 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,728 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,729 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,729 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2020-04-02 06:35:52,730 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2020-04-02 06:35:52,730 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,730 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,731 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,731 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,731 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,732 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,732 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-04-02 06:35:52,732 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,733 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,734 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2020-04-02 06:35:52,734 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,734 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,735 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,735 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_Bd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,735 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2020-04-02 06:35:52,736 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2020-04-02 06:35:52,736 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,737 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2020-04-02 06:35:52,737 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RI_G.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,737 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,739 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2020-04-02 06:35:52,739 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier10 BT' (tt0583m_.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,739 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,739 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LucidaBrightRegular.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,740 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,740 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,740 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,741 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2020-04-02 06:35:52,742 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,742 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,742 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,743 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,743 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,743 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,743 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,744 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2020-04-02 06:35:52,744 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,745 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,745 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,746 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,746 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2020-04-02 06:35:52,746 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,747 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_It.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,747 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,747 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,748 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2020-04-02 06:35:52,748 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2020-04-02 06:35:52,750 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,750 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal bold condensed>) = 1.535
2020-04-02 06:35:52,750 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,751 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,751 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,751 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,751 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2020-04-02 06:35:52,752 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,752 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,752 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RZI_G.ttf) italic normal semibold normal>) = 11.24
2020-04-02 06:35:52,753 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,754 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,754 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,754 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,754 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_Rg.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,755 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,755 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2020-04-02 06:35:52,755 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,756 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,756 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,756 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2020-04-02 06:35:52,756 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_LtIt.ttf) italic normal light normal>) = 11.24
2020-04-02 06:35:52,757 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,757 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,758 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,758 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.05
2020-04-02 06:35:52,758 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,759 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,759 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,760 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RZ_G.ttf) normal normal semibold normal>) = 10.24
2020-04-02 06:35:52,760 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2020-04-02 06:35:52,761 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2020-04-02 06:35:52,761 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2020-04-02 06:35:52,761 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2020-04-02 06:35:52,762 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,763 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2020-04-02 06:35:52,763 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,763 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,763 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,764 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,764 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,765 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,765 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,765 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,766 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2020-04-02 06:35:52,766 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,767 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,767 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,768 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2020-04-02 06:35:52,768 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,769 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,770 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,770 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,770 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier10 BT' (tt0582m_.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,770 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,771 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2020-04-02 06:35:52,771 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,772 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,773 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,773 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,773 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2020-04-02 06:35:52,773 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,774 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,774 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,774 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,775 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 0.24
2020-04-02 06:35:52,775 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,776 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,776 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2020-04-02 06:35:52,777 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,777 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,777 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,778 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2020-04-02 06:35:52,779 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,779 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,779 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,780 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,780 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,780 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2020-04-02 06:35:52,781 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,781 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-04-02 06:35:52,782 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_R_G.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,782 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,783 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,783 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,783 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,784 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,784 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,784 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2020-04-02 06:35:52,785 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,785 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,786 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,786 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,787 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,787 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2020-04-02 06:35:52,788 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,788 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,788 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,789 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,789 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,790 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,790 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,790 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,791 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,791 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,792 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,792 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,792 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,793 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,793 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,794 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2020-04-02 06:35:52,794 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,795 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,795 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,795 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2020-04-02 06:35:52,796 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-04-02 06:35:52,797 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2020-04-02 06:35:52,797 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2020-04-02 06:35:52,797 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,797 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,798 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2020-04-02 06:35:52,798 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,799 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (tt0004m_.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,799 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,799 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,800 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,800 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,800 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,801 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,801 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2020-04-02 06:35:52,802 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,802 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (tt0011m_.ttf) normal normal roman normal>) = 10.145
2020-04-02 06:35:52,802 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,803 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,803 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,804 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,804 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,805 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,805 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,805 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,806 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,806 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,807 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ENVI Symbols' (envisym_.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,807 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,808 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2020-04-02 06:35:52,808 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,808 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,809 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,809 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RBI_G.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,809 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RB_G.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,809 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,810 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,810 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,810 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,810 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,811 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,811 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,812 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,812 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,812 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2020-04-02 06:35:52,813 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,813 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2020-04-02 06:35:52,814 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,814 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,814 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2020-04-02 06:35:52,815 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,816 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,816 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2020-04-02 06:35:52,816 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,817 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,817 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,818 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,818 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,818 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2020-04-02 06:35:52,819 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,819 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,820 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,820 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2020-04-02 06:35:52,821 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,821 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,821 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,822 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,822 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,823 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,823 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,824 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,824 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,824 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,825 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,825 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2020-04-02 06:35:52,826 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,826 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,826 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_Lt.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,827 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,827 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,827 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,828 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,828 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,829 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,829 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal bold condensed>) = 0.5349999999999999
2020-04-02 06:35:52,830 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal book normal>) = 11.05
2020-04-02 06:35:52,830 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,830 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,831 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,832 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,832 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2020-04-02 06:35:52,832 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,832 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,833 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,833 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,834 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,834 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2020-04-02 06:35:52,834 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2020-04-02 06:35:52,835 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,835 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2020-04-02 06:35:52,836 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,837 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,837 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-04-02 06:35:52,837 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,837 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,838 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2020-04-02 06:35:52,838 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,839 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,839 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,840 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,840 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2020-04-02 06:35:52,840 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,841 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,841 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,841 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,842 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,842 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,843 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,843 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,844 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2020-04-02 06:35:52,844 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,845 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,845 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,846 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,846 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,846 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,847 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,847 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LucidaSansRegular.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,847 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,848 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,848 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_RI_G.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,849 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.05
2020-04-02 06:35:52,849 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,849 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LucidaTypewriterRegular.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,850 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_R_G.ttf) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,850 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,851 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,851 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,852 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,852 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,853 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_RB_G.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,853 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,853 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,854 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,855 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,855 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,855 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,855 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,856 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (tt0005m_.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,856 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,857 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,857 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,857 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,858 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,858 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2020-04-02 06:35:52,859 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,859 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,860 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,860 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,861 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,861 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,861 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,862 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2020-04-02 06:35:52,862 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,862 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,863 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,863 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,864 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,864 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,865 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,865 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,865 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2020-04-02 06:35:52,866 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,866 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LucidaBrightDemiItalic.ttf) italic normal demibold normal>) = 11.24
2020-04-02 06:35:52,867 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'SymbolProp BT' (tt9830z_.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,867 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2020-04-02 06:35:52,867 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,868 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,868 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,868 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,869 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier10 BT' (tt0419m_.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,869 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2020-04-02 06:35:52,870 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,870 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,870 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (tt0012m_.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,870 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LucidaBrightDemiBold.ttf) normal normal demibold normal>) = 10.24
2020-04-02 06:35:52,871 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,871 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,872 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,872 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,873 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (tt0003m_.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,873 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LucidaTypewriterBold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,873 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,874 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,874 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal book normal>) = 10.05
2020-04-02 06:35:52,875 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,875 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2020-04-02 06:35:52,875 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,876 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Swis721 BT' (tt0006m_.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,876 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (tt0014m_.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,877 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2020-04-02 06:35:52,877 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,877 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,878 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,878 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,879 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,879 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2020-04-02 06:35:52,880 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,880 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,880 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,881 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dutch801 Rm BT' (tt0013m_.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,881 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2020-04-02 06:35:52,882 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,882 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2020-04-02 06:35:52,883 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,883 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,883 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Courier10 BT' (tt0611m_.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,884 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2020-04-02 06:35:52,884 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,884 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2020-04-02 06:35:52,885 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,885 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,886 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-04-02 06:35:52,886 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,886 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LucidaBrightItalic.ttf) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,887 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2020-04-02 06:35:52,887 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2020-04-02 06:35:52,888 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,888 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified.ttf) normal normal bold normal>) = 10.335
2020-04-02 06:35:52,889 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2020-04-02 06:35:52,889 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,889 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'SymbolMono BT' (tt9831z_.ttf) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,890 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2020-04-02 06:35:52,891 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'HP Simplified' (HPSimplified_BdIt.ttf) italic normal bold normal>) = 11.335
2020-04-02 06:35:52,891 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2020-04-02 06:35:52,891 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2020-04-02 06:35:52,892 [5976] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LucidaSansDemiBold.ttf) normal normal demibold normal>) = 10.24
2020-04-02 06:35:52,892 [5976] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\trueblood\\AppData\\Local\\Continuum\\anaconda3\\envs\\science\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2020-04-02 23:36:58,610 [5976] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-02 23:36:58,610 [5976] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-02 23:36:58,613 [5976] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-02 23:37:13,362 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:37:14,022 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42181
2020-04-02 23:37:14,430 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:37:15,073 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 23:37:15,839 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:37:16,341 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 23:56:11,421 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:56:12,083 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 23:56:12,706 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:56:13,192 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 23:57:52,651 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:57:52,866 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 23:57:52,962 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:57:53,144 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-02 23:58:31,680 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:58:33,449 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42189
2020-04-02 23:59:06,213 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:59:06,432 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-02 23:59:06,527 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-02 23:59:06,700 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-03 02:02:52,720 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-03 02:02:53,572 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /activestations.xml HTTP/1.1" 200 42190
2020-04-03 02:07:43,502 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-03 02:07:43,767 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.data_spec HTTP/1.1" 200 None
2020-04-03 02:07:43,861 [5976] DEBUG    urllib3.connectionpool:959: [JupyterRequire] Starting new HTTPS connection (1): www.ndbc.noaa.gov:443
2020-04-03 02:07:44,039 [5976] DEBUG    urllib3.connectionpool:437: [JupyterRequire] https://www.ndbc.noaa.gov:443 "GET /data/realtime2/44097.swdir HTTP/1.1" 200 None
2020-04-23 19:48:21,896 [16448] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-23 19:48:21,914 [16448] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-23 19:48:21,917 [16448] DEBUG    root:99: [JupyterRequire] Registering comm targets.
2020-04-23 19:49:36,944 [3392] DEBUG    root:77: [JupyterRequire] Loading Jupyter Require extension.
2020-04-23 19:49:36,944 [3392] DEBUG    root:95: [JupyterRequire] Initializing comms.
2020-04-23 19:49:36,946 [3392] DEBUG    root:99: [JupyterRequire] Registering comm targets.
